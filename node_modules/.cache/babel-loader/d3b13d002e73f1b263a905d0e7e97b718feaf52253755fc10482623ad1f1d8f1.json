{"ast":null,"code":"export const findTopicById = (root, id) => {\n  if (!root) return null;\n  if (root.id === id) return root;\n  for (const child of root.children) {\n    const found = findTopicById(child, id);\n    if (found) return found;\n  }\n  return null;\n};\nexport const countIncompleteTopics = topic => {\n  let count = topic.isCompleted ? 0 : 1;\n  for (const child of topic.children) {\n    count += countIncompleteTopics(child);\n  }\n  return count;\n};\nexport const updateParentProgress = topic => {\n  if (!topic.parent) return;\n  const allChildrenCompleted = topic.parent.children.every(child => child.isCompleted);\n  topic.parent.isCompleted = allChildrenCompleted;\n  updateParentProgress(topic.parent);\n};\nexport const showNotification = message => {\n  // 可以使用第三方通知库，这里用简单的 alert 演示\n  alert(message);\n};\n\n// 新增：检查是否存在循环引用\nexport const isDescendant = (parent, child) => {\n  // 检查 child 是否是 parent 的后代\n  if (parent.id === child.id) return true;\n  for (const descendant of parent.children) {\n    if (isDescendant(descendant, child)) return true;\n  }\n  return false;\n};\n\n// 修改：递归更新节点状态\nexport const updateTopicTreeStatus = root => {\n  if (root.children.length === 0) {\n    return; // 叶子节点保持当前状态\n  }\n  if (root.isCompleted) {\n    // 如果父节点完成，所有子节点都要标记为完成\n    root.children.forEach(child => {\n      child.isCompleted = true;\n      updateTopicTreeStatus(child);\n    });\n  } else {\n    // 如果父节点未完成，所有子节点都要标记为未完成\n    root.children.forEach(child => {\n      child.isCompleted = false;\n      updateTopicTreeStatus(child);\n    });\n  }\n};\n\n// 修改：检查并更新父节点状态\nexport const updateParentStatus = root => {\n  if (root.children.length === 0) {\n    return;\n  }\n\n  // 检查所有子节点是否完成\n  const allChildrenCompleted = root.children.every(child => child.isCompleted);\n\n  // 如果所有子节点完成，父节点自动完成\n  if (allChildrenCompleted) {\n    root.isCompleted = true;\n  }\n};","map":{"version":3,"names":["findTopicById","root","id","child","children","found","countIncompleteTopics","topic","count","isCompleted","updateParentProgress","parent","allChildrenCompleted","every","showNotification","message","alert","isDescendant","descendant","updateTopicTreeStatus","length","forEach","updateParentStatus"],"sources":["D:/Work/SIWEI/src/utils/topicUtils.ts"],"sourcesContent":["import { Topic } from '../types/MindMap';\r\n\r\nexport const findTopicById = (root: Topic | undefined | null, id: string): Topic | null => {\r\n  if (!root) return null;\r\n  if (root.id === id) return root;\r\n\r\n  for (const child of root.children) {\r\n    const found = findTopicById(child, id);\r\n    if (found) return found;\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport const countIncompleteTopics = (topic: Topic): number => {\r\n  let count = topic.isCompleted ? 0 : 1;\r\n\r\n  for (const child of topic.children) {\r\n    count += countIncompleteTopics(child);\r\n  }\r\n\r\n  return count;\r\n};\r\n\r\nexport const updateParentProgress = (topic: Topic) => {\r\n  if (!topic.parent) return;\r\n\r\n  const allChildrenCompleted = topic.parent.children.every(child => child.isCompleted);\r\n  topic.parent.isCompleted = allChildrenCompleted;\r\n\r\n  updateParentProgress(topic.parent);\r\n};\r\n\r\nexport const showNotification = (message: string) => {\r\n  // 可以使用第三方通知库，这里用简单的 alert 演示\r\n  alert(message);\r\n};\r\n\r\n// 新增：检查是否存在循环引用\r\nexport const isDescendant = (parent: Topic, child: Topic): boolean => {\r\n  // 检查 child 是否是 parent 的后代\r\n  if (parent.id === child.id) return true;\r\n\r\n  for (const descendant of parent.children) {\r\n    if (isDescendant(descendant, child)) return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\n// 修改：递归更新节点状态\r\nexport const updateTopicTreeStatus = (root: Topic) => {\r\n  if (root.children.length === 0) {\r\n    return; // 叶子节点保持当前状态\r\n  }\r\n\r\n  if (root.isCompleted) {\r\n    // 如果父节点完成，所有子节点都要标记为完成\r\n    root.children.forEach(child => {\r\n      child.isCompleted = true;\r\n      updateTopicTreeStatus(child);\r\n    });\r\n  } else {\r\n    // 如果父节点未完成，所有子节点都要标记为未完成\r\n    root.children.forEach(child => {\r\n      child.isCompleted = false;\r\n      updateTopicTreeStatus(child);\r\n    });\r\n  }\r\n};\r\n\r\n// 修改：检查并更新父节点状态\r\nexport const updateParentStatus = (root: Topic) => {\r\n  if (root.children.length === 0) {\r\n    return;\r\n  }\r\n\r\n  // 检查所有子节点是否完成\r\n  const allChildrenCompleted = root.children.every(child => child.isCompleted);\r\n\r\n  // 如果所有子节点完成，父节点自动完成\r\n  if (allChildrenCompleted) {\r\n    root.isCompleted = true;\r\n  }\r\n};"],"mappings":"AAEA,OAAO,MAAMA,aAAa,GAAGA,CAACC,IAA8B,EAAEC,EAAU,KAAmB;EACzF,IAAI,CAACD,IAAI,EAAE,OAAO,IAAI;EACtB,IAAIA,IAAI,CAACC,EAAE,KAAKA,EAAE,EAAE,OAAOD,IAAI;EAE/B,KAAK,MAAME,KAAK,IAAIF,IAAI,CAACG,QAAQ,EAAE;IACjC,MAAMC,KAAK,GAAGL,aAAa,CAACG,KAAK,EAAED,EAAE,CAAC;IACtC,IAAIG,KAAK,EAAE,OAAOA,KAAK;EACzB;EAEA,OAAO,IAAI;AACb,CAAC;AAED,OAAO,MAAMC,qBAAqB,GAAIC,KAAY,IAAa;EAC7D,IAAIC,KAAK,GAAGD,KAAK,CAACE,WAAW,GAAG,CAAC,GAAG,CAAC;EAErC,KAAK,MAAMN,KAAK,IAAII,KAAK,CAACH,QAAQ,EAAE;IAClCI,KAAK,IAAIF,qBAAqB,CAACH,KAAK,CAAC;EACvC;EAEA,OAAOK,KAAK;AACd,CAAC;AAED,OAAO,MAAME,oBAAoB,GAAIH,KAAY,IAAK;EACpD,IAAI,CAACA,KAAK,CAACI,MAAM,EAAE;EAEnB,MAAMC,oBAAoB,GAAGL,KAAK,CAACI,MAAM,CAACP,QAAQ,CAACS,KAAK,CAACV,KAAK,IAAIA,KAAK,CAACM,WAAW,CAAC;EACpFF,KAAK,CAACI,MAAM,CAACF,WAAW,GAAGG,oBAAoB;EAE/CF,oBAAoB,CAACH,KAAK,CAACI,MAAM,CAAC;AACpC,CAAC;AAED,OAAO,MAAMG,gBAAgB,GAAIC,OAAe,IAAK;EACnD;EACAC,KAAK,CAACD,OAAO,CAAC;AAChB,CAAC;;AAED;AACA,OAAO,MAAME,YAAY,GAAGA,CAACN,MAAa,EAAER,KAAY,KAAc;EACpE;EACA,IAAIQ,MAAM,CAACT,EAAE,KAAKC,KAAK,CAACD,EAAE,EAAE,OAAO,IAAI;EAEvC,KAAK,MAAMgB,UAAU,IAAIP,MAAM,CAACP,QAAQ,EAAE;IACxC,IAAIa,YAAY,CAACC,UAAU,EAAEf,KAAK,CAAC,EAAE,OAAO,IAAI;EAClD;EAEA,OAAO,KAAK;AACd,CAAC;;AAED;AACA,OAAO,MAAMgB,qBAAqB,GAAIlB,IAAW,IAAK;EACpD,IAAIA,IAAI,CAACG,QAAQ,CAACgB,MAAM,KAAK,CAAC,EAAE;IAC9B,OAAO,CAAC;EACV;EAEA,IAAInB,IAAI,CAACQ,WAAW,EAAE;IACpB;IACAR,IAAI,CAACG,QAAQ,CAACiB,OAAO,CAAClB,KAAK,IAAI;MAC7BA,KAAK,CAACM,WAAW,GAAG,IAAI;MACxBU,qBAAqB,CAAChB,KAAK,CAAC;IAC9B,CAAC,CAAC;EACJ,CAAC,MAAM;IACL;IACAF,IAAI,CAACG,QAAQ,CAACiB,OAAO,CAAClB,KAAK,IAAI;MAC7BA,KAAK,CAACM,WAAW,GAAG,KAAK;MACzBU,qBAAqB,CAAChB,KAAK,CAAC;IAC9B,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA,OAAO,MAAMmB,kBAAkB,GAAIrB,IAAW,IAAK;EACjD,IAAIA,IAAI,CAACG,QAAQ,CAACgB,MAAM,KAAK,CAAC,EAAE;IAC9B;EACF;;EAEA;EACA,MAAMR,oBAAoB,GAAGX,IAAI,CAACG,QAAQ,CAACS,KAAK,CAACV,KAAK,IAAIA,KAAK,CAACM,WAAW,CAAC;;EAE5E;EACA,IAAIG,oBAAoB,EAAE;IACxBX,IAAI,CAACQ,WAAW,GAAG,IAAI;EACzB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}