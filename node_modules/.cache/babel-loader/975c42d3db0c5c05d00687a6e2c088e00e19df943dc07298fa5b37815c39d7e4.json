{"ast":null,"code":"export const findTopicById = (root, id) => {\n  if (!root) return null;\n  if (root.id === id) return root;\n  for (const child of root.children) {\n    const found = findTopicById(child, id);\n    if (found) return found;\n  }\n  return null;\n};\nexport const countIncompleteTopics = topic => {\n  let count = topic.isCompleted ? 0 : 1;\n  for (const child of topic.children) {\n    count += countIncompleteTopics(child);\n  }\n  return count;\n};\nexport const showNotification = message => {\n  // 可以使用第三方通知库，这里用简单的 alert 演示\n  alert(message);\n};\n\n// 新增：检查是否存在循环引用\nexport const isDescendant = (parent, child) => {\n  // 检查 child 是否是 parent 的后代\n  if (parent.id === child.id) return true;\n  for (const descendant of parent.children) {\n    if (isDescendant(descendant, child)) return true;\n  }\n  return false;\n};\n\n// 修改：递归更新节点状态\nexport const updateTopicTreeStatus = root => {\n  // 使用后序遍历，自底向上更新状态\n  const stack = [root];\n  const visited = new Set();\n  while (stack.length > 0) {\n    const current = stack[stack.length - 1];\n    let allChildrenVisited = true;\n    for (const child of current.children) {\n      if (!visited.has(child.id)) {\n        stack.push(child);\n        allChildrenVisited = false;\n      }\n    }\n    if (allChildrenVisited) {\n      stack.pop();\n      visited.add(current.id);\n      if (current.children.length > 0) {\n        current.isCompleted = current.children.every(child => child.isCompleted);\n      }\n    }\n  }\n};\n\n// 修改：强制设置节点及其所有子节点的状态\nexport const setTopicTreeComplete = (root, isCompleted) => {\n  // 使用队列代替递归，避免调用栈溢出\n  const queue = [root];\n  while (queue.length > 0) {\n    const current = queue.shift();\n    current.isCompleted = isCompleted;\n    queue.push(...current.children);\n  }\n};","map":{"version":3,"names":["findTopicById","root","id","child","children","found","countIncompleteTopics","topic","count","isCompleted","showNotification","message","alert","isDescendant","parent","descendant","updateTopicTreeStatus","stack","visited","Set","length","current","allChildrenVisited","has","push","pop","add","every","setTopicTreeComplete","queue","shift"],"sources":["D:/Work/SIWEI/src/utils/topicUtils.ts"],"sourcesContent":["import { Topic } from '../types/MindMap';\r\n\r\nexport const findTopicById = (root: Topic | undefined | null, id: string): Topic | null => {\r\n  if (!root) return null;\r\n  if (root.id === id) return root;\r\n\r\n  for (const child of root.children) {\r\n    const found = findTopicById(child, id);\r\n    if (found) return found;\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport const countIncompleteTopics = (topic: Topic): number => {\r\n  let count = topic.isCompleted ? 0 : 1;\r\n\r\n  for (const child of topic.children) {\r\n    count += countIncompleteTopics(child);\r\n  }\r\n\r\n  return count;\r\n};\r\n\r\nexport const showNotification = (message: string) => {\r\n  // 可以使用第三方通知库，这里用简单的 alert 演示\r\n  alert(message);\r\n};\r\n\r\n// 新增：检查是否存在循环引用\r\nexport const isDescendant = (parent: Topic, child: Topic): boolean => {\r\n  // 检查 child 是否是 parent 的后代\r\n  if (parent.id === child.id) return true;\r\n\r\n  for (const descendant of parent.children) {\r\n    if (isDescendant(descendant, child)) return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\n// 修改：递归更新节点状态\r\nexport const updateTopicTreeStatus = (root: Topic) => {\r\n  // 使用后序遍历，自底向上更新状态\r\n  const stack: Topic[] = [root];\r\n  const visited = new Set<string>();\r\n\r\n  while (stack.length > 0) {\r\n    const current = stack[stack.length - 1];\r\n\r\n    let allChildrenVisited = true;\r\n    for (const child of current.children) {\r\n      if (!visited.has(child.id)) {\r\n        stack.push(child);\r\n        allChildrenVisited = false;\r\n      }\r\n    }\r\n\r\n    if (allChildrenVisited) {\r\n      stack.pop();\r\n      visited.add(current.id);\r\n\r\n      if (current.children.length > 0) {\r\n        current.isCompleted = current.children.every(child => child.isCompleted);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// 修改：强制设置节点及其所有子节点的状态\r\nexport const setTopicTreeComplete = (root: Topic, isCompleted: boolean) => {\r\n  // 使用队列代替递归，避免调用栈溢出\r\n  const queue: Topic[] = [root];\r\n\r\n  while (queue.length > 0) {\r\n    const current = queue.shift()!;\r\n    current.isCompleted = isCompleted;\r\n    queue.push(...current.children);\r\n  }\r\n};"],"mappings":"AAEA,OAAO,MAAMA,aAAa,GAAGA,CAACC,IAA8B,EAAEC,EAAU,KAAmB;EACzF,IAAI,CAACD,IAAI,EAAE,OAAO,IAAI;EACtB,IAAIA,IAAI,CAACC,EAAE,KAAKA,EAAE,EAAE,OAAOD,IAAI;EAE/B,KAAK,MAAME,KAAK,IAAIF,IAAI,CAACG,QAAQ,EAAE;IACjC,MAAMC,KAAK,GAAGL,aAAa,CAACG,KAAK,EAAED,EAAE,CAAC;IACtC,IAAIG,KAAK,EAAE,OAAOA,KAAK;EACzB;EAEA,OAAO,IAAI;AACb,CAAC;AAED,OAAO,MAAMC,qBAAqB,GAAIC,KAAY,IAAa;EAC7D,IAAIC,KAAK,GAAGD,KAAK,CAACE,WAAW,GAAG,CAAC,GAAG,CAAC;EAErC,KAAK,MAAMN,KAAK,IAAII,KAAK,CAACH,QAAQ,EAAE;IAClCI,KAAK,IAAIF,qBAAqB,CAACH,KAAK,CAAC;EACvC;EAEA,OAAOK,KAAK;AACd,CAAC;AAED,OAAO,MAAME,gBAAgB,GAAIC,OAAe,IAAK;EACnD;EACAC,KAAK,CAACD,OAAO,CAAC;AAChB,CAAC;;AAED;AACA,OAAO,MAAME,YAAY,GAAGA,CAACC,MAAa,EAAEX,KAAY,KAAc;EACpE;EACA,IAAIW,MAAM,CAACZ,EAAE,KAAKC,KAAK,CAACD,EAAE,EAAE,OAAO,IAAI;EAEvC,KAAK,MAAMa,UAAU,IAAID,MAAM,CAACV,QAAQ,EAAE;IACxC,IAAIS,YAAY,CAACE,UAAU,EAAEZ,KAAK,CAAC,EAAE,OAAO,IAAI;EAClD;EAEA,OAAO,KAAK;AACd,CAAC;;AAED;AACA,OAAO,MAAMa,qBAAqB,GAAIf,IAAW,IAAK;EACpD;EACA,MAAMgB,KAAc,GAAG,CAAChB,IAAI,CAAC;EAC7B,MAAMiB,OAAO,GAAG,IAAIC,GAAG,CAAS,CAAC;EAEjC,OAAOF,KAAK,CAACG,MAAM,GAAG,CAAC,EAAE;IACvB,MAAMC,OAAO,GAAGJ,KAAK,CAACA,KAAK,CAACG,MAAM,GAAG,CAAC,CAAC;IAEvC,IAAIE,kBAAkB,GAAG,IAAI;IAC7B,KAAK,MAAMnB,KAAK,IAAIkB,OAAO,CAACjB,QAAQ,EAAE;MACpC,IAAI,CAACc,OAAO,CAACK,GAAG,CAACpB,KAAK,CAACD,EAAE,CAAC,EAAE;QAC1Be,KAAK,CAACO,IAAI,CAACrB,KAAK,CAAC;QACjBmB,kBAAkB,GAAG,KAAK;MAC5B;IACF;IAEA,IAAIA,kBAAkB,EAAE;MACtBL,KAAK,CAACQ,GAAG,CAAC,CAAC;MACXP,OAAO,CAACQ,GAAG,CAACL,OAAO,CAACnB,EAAE,CAAC;MAEvB,IAAImB,OAAO,CAACjB,QAAQ,CAACgB,MAAM,GAAG,CAAC,EAAE;QAC/BC,OAAO,CAACZ,WAAW,GAAGY,OAAO,CAACjB,QAAQ,CAACuB,KAAK,CAACxB,KAAK,IAAIA,KAAK,CAACM,WAAW,CAAC;MAC1E;IACF;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMmB,oBAAoB,GAAGA,CAAC3B,IAAW,EAAEQ,WAAoB,KAAK;EACzE;EACA,MAAMoB,KAAc,GAAG,CAAC5B,IAAI,CAAC;EAE7B,OAAO4B,KAAK,CAACT,MAAM,GAAG,CAAC,EAAE;IACvB,MAAMC,OAAO,GAAGQ,KAAK,CAACC,KAAK,CAAC,CAAE;IAC9BT,OAAO,CAACZ,WAAW,GAAGA,WAAW;IACjCoB,KAAK,CAACL,IAAI,CAAC,GAAGH,OAAO,CAACjB,QAAQ,CAAC;EACjC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}