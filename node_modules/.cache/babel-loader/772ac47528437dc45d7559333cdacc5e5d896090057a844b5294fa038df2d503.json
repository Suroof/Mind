{"ast":null,"code":"const MINDMAPS_KEY = 'mindmaps';\nconst SHARED_MAPS_KEY = 'shared-mindmaps';\n\n// 保存思维导图\nexport const saveMindMap = async mindMap => {\n  try {\n    const maps = getAllMindMaps();\n    const index = maps.findIndex(m => m.id === mindMap.id);\n    if (index >= 0) {\n      maps[index] = {\n        ...mindMap,\n        updatedAt: new Date().toISOString()\n      };\n    } else {\n      maps.push({\n        ...mindMap,\n        updatedAt: new Date().toISOString()\n      });\n    }\n    localStorage.setItem(MINDMAPS_KEY, JSON.stringify(maps));\n    return true;\n  } catch (error) {\n    console.error('保存失败:', error);\n    return false;\n  }\n};\n\n// 获取所有思维导图\nexport const getAllMindMaps = () => {\n  try {\n    return JSON.parse(localStorage.getItem(MINDMAPS_KEY) || '[]');\n  } catch (error) {\n    console.error('获取思维导图失败:', error);\n    return [];\n  }\n};\n\n// 发布/分享思维导图\nexport const publishMindMap = async (mindMap, authorId, authorName, isPublic = true) => {\n  try {\n    const sharedMaps = getAllSharedMindMaps();\n    const cloudMap = {\n      ...mindMap,\n      authorId,\n      authorName,\n      publishedAt: new Date().toISOString(),\n      likes: 0,\n      comments: [],\n      isPublic\n    };\n    const index = sharedMaps.findIndex(m => m.id === mindMap.id);\n    if (index >= 0) {\n      sharedMaps[index] = cloudMap;\n    } else {\n      sharedMaps.push(cloudMap);\n    }\n    localStorage.setItem(SHARED_MAPS_KEY, JSON.stringify(sharedMaps));\n    return true;\n  } catch (error) {\n    console.error('发布失败:', error);\n    return false;\n  }\n};\n\n// 获取所有分享的思维导图\nexport const getAllSharedMindMaps = () => {\n  try {\n    return JSON.parse(localStorage.getItem(SHARED_MAPS_KEY) || '[]');\n  } catch (error) {\n    console.error('获取分享思维导图失败:', error);\n    return [];\n  }\n};\n\n// 获取用户的思维导图\nexport const getUserMindMaps = userId => {\n  const allMaps = getAllSharedMindMaps();\n  return allMaps.filter(map => map.authorId === userId);\n};\n\n// 点赞\nexport const likeMindMap = async mapId => {\n  try {\n    const maps = getAllSharedMindMaps();\n    const index = maps.findIndex(map => map.id === mapId);\n    if (index >= 0) {\n      maps[index].likes = (maps[index].likes || 0) + 1;\n      localStorage.setItem(SHARED_MAPS_KEY, JSON.stringify(maps));\n      return true;\n    }\n    return false;\n  } catch (error) {\n    console.error('点赞失败:', error);\n    return false;\n  }\n};\n\n// 添加评论\nexport const addComment = async (mapId, authorId, authorName, content) => {\n  try {\n    const maps = getAllSharedMindMaps();\n    const index = maps.findIndex(map => map.id === mapId);\n    if (index >= 0) {\n      var _maps$index$comments;\n      const comment = {\n        id: Date.now().toString(),\n        authorId,\n        authorName,\n        content,\n        createdAt: new Date().toISOString()\n      };\n      if (!maps[index].comments) {\n        maps[index].comments = [];\n      }\n      (_maps$index$comments = maps[index].comments) === null || _maps$index$comments === void 0 ? void 0 : _maps$index$comments.push(comment);\n      localStorage.setItem(SHARED_MAPS_KEY, JSON.stringify(maps));\n      return true;\n    }\n    return false;\n  } catch (error) {\n    console.error('添加评论失败:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["MINDMAPS_KEY","SHARED_MAPS_KEY","saveMindMap","mindMap","maps","getAllMindMaps","index","findIndex","m","id","updatedAt","Date","toISOString","push","localStorage","setItem","JSON","stringify","error","console","parse","getItem","publishMindMap","authorId","authorName","isPublic","sharedMaps","getAllSharedMindMaps","cloudMap","publishedAt","likes","comments","getUserMindMaps","userId","allMaps","filter","map","likeMindMap","mapId","addComment","content","_maps$index$comments","comment","now","toString","createdAt"],"sources":["D:/Work/SIWEI/src/utils/cloudStorage.ts"],"sourcesContent":["import { MindMap } from '../types/MindMap';\r\n\r\ninterface CloudMindMap extends MindMap {\r\n  authorId?: string;\r\n  authorName?: string;\r\n  publishedAt?: string;\r\n  likes?: number;\r\n  comments?: Comment[];\r\n  isPublic?: boolean;\r\n}\r\n\r\ninterface Comment {\r\n  id: string;\r\n  authorId: string;\r\n  authorName: string;\r\n  content: string;\r\n  createdAt: string;\r\n}\r\n\r\nconst MINDMAPS_KEY = 'mindmaps';\r\nconst SHARED_MAPS_KEY = 'shared-mindmaps';\r\n\r\n// 保存思维导图\r\nexport const saveMindMap = async (mindMap: MindMap): Promise<boolean> => {\r\n  try {\r\n    const maps = getAllMindMaps();\r\n    const index = maps.findIndex(m => m.id === mindMap.id);\r\n\r\n    if (index >= 0) {\r\n      maps[index] = {\r\n        ...mindMap,\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n    } else {\r\n      maps.push({\r\n        ...mindMap,\r\n        updatedAt: new Date().toISOString()\r\n      });\r\n    }\r\n\r\n    localStorage.setItem(MINDMAPS_KEY, JSON.stringify(maps));\r\n    return true;\r\n  } catch (error) {\r\n    console.error('保存失败:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// 获取所有思维导图\r\nexport const getAllMindMaps = (): MindMap[] => {\r\n  try {\r\n    return JSON.parse(localStorage.getItem(MINDMAPS_KEY) || '[]');\r\n  } catch (error) {\r\n    console.error('获取思维导图失败:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// 发布/分享思维导图\r\nexport const publishMindMap = async (\r\n  mindMap: MindMap,\r\n  authorId: string,\r\n  authorName: string,\r\n  isPublic: boolean = true\r\n): Promise<boolean> => {\r\n  try {\r\n    const sharedMaps = getAllSharedMindMaps();\r\n    const cloudMap: CloudMindMap = {\r\n      ...mindMap,\r\n      authorId,\r\n      authorName,\r\n      publishedAt: new Date().toISOString(),\r\n      likes: 0,\r\n      comments: [],\r\n      isPublic\r\n    };\r\n\r\n    const index = sharedMaps.findIndex(m => m.id === mindMap.id);\r\n    if (index >= 0) {\r\n      sharedMaps[index] = cloudMap;\r\n    } else {\r\n      sharedMaps.push(cloudMap);\r\n    }\r\n\r\n    localStorage.setItem(SHARED_MAPS_KEY, JSON.stringify(sharedMaps));\r\n    return true;\r\n  } catch (error) {\r\n    console.error('发布失败:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// 获取所有分享的思维导图\r\nexport const getAllSharedMindMaps = (): CloudMindMap[] => {\r\n  try {\r\n    return JSON.parse(localStorage.getItem(SHARED_MAPS_KEY) || '[]');\r\n  } catch (error) {\r\n    console.error('获取分享思维导图失败:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// 获取用户的思维导图\r\nexport const getUserMindMaps = (userId: string): CloudMindMap[] => {\r\n  const allMaps = getAllSharedMindMaps();\r\n  return allMaps.filter(map => map.authorId === userId);\r\n};\r\n\r\n// 点赞\r\nexport const likeMindMap = async (mapId: string): Promise<boolean> => {\r\n  try {\r\n    const maps = getAllSharedMindMaps();\r\n    const index = maps.findIndex(map => map.id === mapId);\r\n    if (index >= 0) {\r\n      maps[index].likes = (maps[index].likes || 0) + 1;\r\n      localStorage.setItem(SHARED_MAPS_KEY, JSON.stringify(maps));\r\n      return true;\r\n    }\r\n    return false;\r\n  } catch (error) {\r\n    console.error('点赞失败:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// 添加评论\r\nexport const addComment = async (\r\n  mapId: string,\r\n  authorId: string,\r\n  authorName: string,\r\n  content: string\r\n): Promise<boolean> => {\r\n  try {\r\n    const maps = getAllSharedMindMaps();\r\n    const index = maps.findIndex(map => map.id === mapId);\r\n    if (index >= 0) {\r\n      const comment = {\r\n        id: Date.now().toString(),\r\n        authorId,\r\n        authorName,\r\n        content,\r\n        createdAt: new Date().toISOString()\r\n      };\r\n\r\n      if (!maps[index].comments) {\r\n        maps[index].comments = [];\r\n      }\r\n\r\n      maps[index].comments?.push(comment);\r\n      localStorage.setItem(SHARED_MAPS_KEY, JSON.stringify(maps));\r\n      return true;\r\n    }\r\n    return false;\r\n  } catch (error) {\r\n    console.error('添加评论失败:', error);\r\n    return false;\r\n  }\r\n};"],"mappings":"AAmBA,MAAMA,YAAY,GAAG,UAAU;AAC/B,MAAMC,eAAe,GAAG,iBAAiB;;AAEzC;AACA,OAAO,MAAMC,WAAW,GAAG,MAAOC,OAAgB,IAAuB;EACvE,IAAI;IACF,MAAMC,IAAI,GAAGC,cAAc,CAAC,CAAC;IAC7B,MAAMC,KAAK,GAAGF,IAAI,CAACG,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKN,OAAO,CAACM,EAAE,CAAC;IAEtD,IAAIH,KAAK,IAAI,CAAC,EAAE;MACdF,IAAI,CAACE,KAAK,CAAC,GAAG;QACZ,GAAGH,OAAO;QACVO,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC;IACH,CAAC,MAAM;MACLR,IAAI,CAACS,IAAI,CAAC;QACR,GAAGV,OAAO;QACVO,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC,CAAC;IACJ;IAEAE,YAAY,CAACC,OAAO,CAACf,YAAY,EAAEgB,IAAI,CAACC,SAAS,CAACb,IAAI,CAAC,CAAC;IACxD,OAAO,IAAI;EACb,CAAC,CAAC,OAAOc,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,OAAO,EAAEA,KAAK,CAAC;IAC7B,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAMb,cAAc,GAAGA,CAAA,KAAiB;EAC7C,IAAI;IACF,OAAOW,IAAI,CAACI,KAAK,CAACN,YAAY,CAACO,OAAO,CAACrB,YAAY,CAAC,IAAI,IAAI,CAAC;EAC/D,CAAC,CAAC,OAAOkB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;IACjC,OAAO,EAAE;EACX;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,cAAc,GAAG,MAAAA,CAC5BnB,OAAgB,EAChBoB,QAAgB,EAChBC,UAAkB,EAClBC,QAAiB,GAAG,IAAI,KACH;EACrB,IAAI;IACF,MAAMC,UAAU,GAAGC,oBAAoB,CAAC,CAAC;IACzC,MAAMC,QAAsB,GAAG;MAC7B,GAAGzB,OAAO;MACVoB,QAAQ;MACRC,UAAU;MACVK,WAAW,EAAE,IAAIlB,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACrCkB,KAAK,EAAE,CAAC;MACRC,QAAQ,EAAE,EAAE;MACZN;IACF,CAAC;IAED,MAAMnB,KAAK,GAAGoB,UAAU,CAACnB,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKN,OAAO,CAACM,EAAE,CAAC;IAC5D,IAAIH,KAAK,IAAI,CAAC,EAAE;MACdoB,UAAU,CAACpB,KAAK,CAAC,GAAGsB,QAAQ;IAC9B,CAAC,MAAM;MACLF,UAAU,CAACb,IAAI,CAACe,QAAQ,CAAC;IAC3B;IAEAd,YAAY,CAACC,OAAO,CAACd,eAAe,EAAEe,IAAI,CAACC,SAAS,CAACS,UAAU,CAAC,CAAC;IACjE,OAAO,IAAI;EACb,CAAC,CAAC,OAAOR,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,OAAO,EAAEA,KAAK,CAAC;IAC7B,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAMS,oBAAoB,GAAGA,CAAA,KAAsB;EACxD,IAAI;IACF,OAAOX,IAAI,CAACI,KAAK,CAACN,YAAY,CAACO,OAAO,CAACpB,eAAe,CAAC,IAAI,IAAI,CAAC;EAClE,CAAC,CAAC,OAAOiB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;IACnC,OAAO,EAAE;EACX;AACF,CAAC;;AAED;AACA,OAAO,MAAMc,eAAe,GAAIC,MAAc,IAAqB;EACjE,MAAMC,OAAO,GAAGP,oBAAoB,CAAC,CAAC;EACtC,OAAOO,OAAO,CAACC,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACb,QAAQ,KAAKU,MAAM,CAAC;AACvD,CAAC;;AAED;AACA,OAAO,MAAMI,WAAW,GAAG,MAAOC,KAAa,IAAuB;EACpE,IAAI;IACF,MAAMlC,IAAI,GAAGuB,oBAAoB,CAAC,CAAC;IACnC,MAAMrB,KAAK,GAAGF,IAAI,CAACG,SAAS,CAAC6B,GAAG,IAAIA,GAAG,CAAC3B,EAAE,KAAK6B,KAAK,CAAC;IACrD,IAAIhC,KAAK,IAAI,CAAC,EAAE;MACdF,IAAI,CAACE,KAAK,CAAC,CAACwB,KAAK,GAAG,CAAC1B,IAAI,CAACE,KAAK,CAAC,CAACwB,KAAK,IAAI,CAAC,IAAI,CAAC;MAChDhB,YAAY,CAACC,OAAO,CAACd,eAAe,EAAEe,IAAI,CAACC,SAAS,CAACb,IAAI,CAAC,CAAC;MAC3D,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd,CAAC,CAAC,OAAOc,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,OAAO,EAAEA,KAAK,CAAC;IAC7B,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAMqB,UAAU,GAAG,MAAAA,CACxBD,KAAa,EACbf,QAAgB,EAChBC,UAAkB,EAClBgB,OAAe,KACM;EACrB,IAAI;IACF,MAAMpC,IAAI,GAAGuB,oBAAoB,CAAC,CAAC;IACnC,MAAMrB,KAAK,GAAGF,IAAI,CAACG,SAAS,CAAC6B,GAAG,IAAIA,GAAG,CAAC3B,EAAE,KAAK6B,KAAK,CAAC;IACrD,IAAIhC,KAAK,IAAI,CAAC,EAAE;MAAA,IAAAmC,oBAAA;MACd,MAAMC,OAAO,GAAG;QACdjC,EAAE,EAAEE,IAAI,CAACgC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;QACzBrB,QAAQ;QACRC,UAAU;QACVgB,OAAO;QACPK,SAAS,EAAE,IAAIlC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC;MAED,IAAI,CAACR,IAAI,CAACE,KAAK,CAAC,CAACyB,QAAQ,EAAE;QACzB3B,IAAI,CAACE,KAAK,CAAC,CAACyB,QAAQ,GAAG,EAAE;MAC3B;MAEA,CAAAU,oBAAA,GAAArC,IAAI,CAACE,KAAK,CAAC,CAACyB,QAAQ,cAAAU,oBAAA,uBAApBA,oBAAA,CAAsB5B,IAAI,CAAC6B,OAAO,CAAC;MACnC5B,YAAY,CAACC,OAAO,CAACd,eAAe,EAAEe,IAAI,CAACC,SAAS,CAACb,IAAI,CAAC,CAAC;MAC3D,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd,CAAC,CAAC,OAAOc,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;IAC/B,OAAO,KAAK;EACd;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}