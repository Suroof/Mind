{"ast":null,"code":"export const findTopicById = (root, id) => {\n  if (!root) return null;\n  if (root.id === id) return root;\n  for (const child of root.children) {\n    const found = findTopicById(child, id);\n    if (found) return found;\n  }\n  return null;\n};\nexport const countIncompleteTopics = topic => {\n  let count = topic.isCompleted ? 0 : 1;\n  for (const child of topic.children) {\n    count += countIncompleteTopics(child);\n  }\n  return count;\n};\nexport const showNotification = message => {\n  // 可以使用第三方通知库，这里用简单的 alert 演示\n  alert(message);\n};\n\n// 新增：检查是否存在循环引用\nexport const isDescendant = (parent, child) => {\n  // 检查 child 是否是 parent 的后代\n  if (parent.id === child.id) return true;\n  for (const descendant of parent.children) {\n    if (isDescendant(descendant, child)) return true;\n  }\n  return false;\n};\n\n// 修改：递归更新节点状态\nexport const updateTopicTreeStatus = root => {\n  // 如果是叶子节点，保持当前状态\n  if (root.children.length === 0) {\n    return;\n  }\n\n  // 如果不是叶子节点：\n  // 1. 先递归更新所有子节点\n  root.children.forEach(child => {\n    updateTopicTreeStatus(child);\n  });\n\n  // 2. 根据子节点状态更新当前节点\n  root.isCompleted = root.children.every(child => child.isCompleted);\n};\n\n// 新增：强制设置节点及其所有子节点的状态\nexport const setTopicTreeComplete = (root, isCompleted) => {\n  // 设置当前节点状态\n  root.isCompleted = isCompleted;\n\n  // 递归设置所有子节点状态\n  root.children.forEach(child => {\n    setTopicTreeComplete(child, isCompleted);\n  });\n};","map":{"version":3,"names":["findTopicById","root","id","child","children","found","countIncompleteTopics","topic","count","isCompleted","showNotification","message","alert","isDescendant","parent","descendant","updateTopicTreeStatus","length","forEach","every","setTopicTreeComplete"],"sources":["D:/Work/SIWEI/src/utils/topicUtils.ts"],"sourcesContent":["import { Topic } from '../types/MindMap';\r\n\r\nexport const findTopicById = (root: Topic | undefined | null, id: string): Topic | null => {\r\n  if (!root) return null;\r\n  if (root.id === id) return root;\r\n\r\n  for (const child of root.children) {\r\n    const found = findTopicById(child, id);\r\n    if (found) return found;\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport const countIncompleteTopics = (topic: Topic): number => {\r\n  let count = topic.isCompleted ? 0 : 1;\r\n\r\n  for (const child of topic.children) {\r\n    count += countIncompleteTopics(child);\r\n  }\r\n\r\n  return count;\r\n};\r\n\r\nexport const showNotification = (message: string) => {\r\n  // 可以使用第三方通知库，这里用简单的 alert 演示\r\n  alert(message);\r\n};\r\n\r\n// 新增：检查是否存在循环引用\r\nexport const isDescendant = (parent: Topic, child: Topic): boolean => {\r\n  // 检查 child 是否是 parent 的后代\r\n  if (parent.id === child.id) return true;\r\n\r\n  for (const descendant of parent.children) {\r\n    if (isDescendant(descendant, child)) return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\n// 修改：递归更新节点状态\r\nexport const updateTopicTreeStatus = (root: Topic) => {\r\n  // 如果是叶子节点，保持当前状态\r\n  if (root.children.length === 0) {\r\n    return;\r\n  }\r\n\r\n  // 如果不是叶子节点：\r\n  // 1. 先递归更新所有子节点\r\n  root.children.forEach(child => {\r\n    updateTopicTreeStatus(child);\r\n  });\r\n\r\n  // 2. 根据子节点状态更新当前节点\r\n  root.isCompleted = root.children.every(child => child.isCompleted);\r\n};\r\n\r\n// 新增：强制设置节点及其所有子节点的状态\r\nexport const setTopicTreeComplete = (root: Topic, isCompleted: boolean) => {\r\n  // 设置当前节点状态\r\n  root.isCompleted = isCompleted;\r\n\r\n  // 递归设置所有子节点状态\r\n  root.children.forEach(child => {\r\n    setTopicTreeComplete(child, isCompleted);\r\n  });\r\n};"],"mappings":"AAEA,OAAO,MAAMA,aAAa,GAAGA,CAACC,IAA8B,EAAEC,EAAU,KAAmB;EACzF,IAAI,CAACD,IAAI,EAAE,OAAO,IAAI;EACtB,IAAIA,IAAI,CAACC,EAAE,KAAKA,EAAE,EAAE,OAAOD,IAAI;EAE/B,KAAK,MAAME,KAAK,IAAIF,IAAI,CAACG,QAAQ,EAAE;IACjC,MAAMC,KAAK,GAAGL,aAAa,CAACG,KAAK,EAAED,EAAE,CAAC;IACtC,IAAIG,KAAK,EAAE,OAAOA,KAAK;EACzB;EAEA,OAAO,IAAI;AACb,CAAC;AAED,OAAO,MAAMC,qBAAqB,GAAIC,KAAY,IAAa;EAC7D,IAAIC,KAAK,GAAGD,KAAK,CAACE,WAAW,GAAG,CAAC,GAAG,CAAC;EAErC,KAAK,MAAMN,KAAK,IAAII,KAAK,CAACH,QAAQ,EAAE;IAClCI,KAAK,IAAIF,qBAAqB,CAACH,KAAK,CAAC;EACvC;EAEA,OAAOK,KAAK;AACd,CAAC;AAED,OAAO,MAAME,gBAAgB,GAAIC,OAAe,IAAK;EACnD;EACAC,KAAK,CAACD,OAAO,CAAC;AAChB,CAAC;;AAED;AACA,OAAO,MAAME,YAAY,GAAGA,CAACC,MAAa,EAAEX,KAAY,KAAc;EACpE;EACA,IAAIW,MAAM,CAACZ,EAAE,KAAKC,KAAK,CAACD,EAAE,EAAE,OAAO,IAAI;EAEvC,KAAK,MAAMa,UAAU,IAAID,MAAM,CAACV,QAAQ,EAAE;IACxC,IAAIS,YAAY,CAACE,UAAU,EAAEZ,KAAK,CAAC,EAAE,OAAO,IAAI;EAClD;EAEA,OAAO,KAAK;AACd,CAAC;;AAED;AACA,OAAO,MAAMa,qBAAqB,GAAIf,IAAW,IAAK;EACpD;EACA,IAAIA,IAAI,CAACG,QAAQ,CAACa,MAAM,KAAK,CAAC,EAAE;IAC9B;EACF;;EAEA;EACA;EACAhB,IAAI,CAACG,QAAQ,CAACc,OAAO,CAACf,KAAK,IAAI;IAC7Ba,qBAAqB,CAACb,KAAK,CAAC;EAC9B,CAAC,CAAC;;EAEF;EACAF,IAAI,CAACQ,WAAW,GAAGR,IAAI,CAACG,QAAQ,CAACe,KAAK,CAAChB,KAAK,IAAIA,KAAK,CAACM,WAAW,CAAC;AACpE,CAAC;;AAED;AACA,OAAO,MAAMW,oBAAoB,GAAGA,CAACnB,IAAW,EAAEQ,WAAoB,KAAK;EACzE;EACAR,IAAI,CAACQ,WAAW,GAAGA,WAAW;;EAE9B;EACAR,IAAI,CAACG,QAAQ,CAACc,OAAO,CAACf,KAAK,IAAI;IAC7BiB,oBAAoB,CAACjB,KAAK,EAAEM,WAAW,CAAC;EAC1C,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}